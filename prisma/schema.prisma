generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users

model User {
  id        String      @id
  name      String
  email     String
  // user_auth User_Auth?
  character Character[]

  @@unique([id, email])
  @@map("users")
}

// model User_Auth {
//   user          User   @relation(fields: [user_id, email], references: [id, email])
//   user_id       String
//   email         String
//   password_hash String

//   @@unique([user_id, email])
//   @@map("user_auth")
// }

// Characters

model Character {
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  id               Int              @id @default(autoincrement())
  name             String
  class            Classes
  level            Int
  attributes       Attribute?
  attack           Attack[]
  defense          Defense?
  character_skills CharacterSkill[]

  @@map("characters")
}

enum Classes {
  Arcanista
  Barbaro
  Bardo
  Bucaneiro
  Cacador
  Cavaleiro
  Clerigo
  Druida
  Guerreiro
  Inventor
  Ladino
  Lutador
  Nobre
  Paladino
}

model Attribute {
  character    Character @relation(fields: [character_id], references: [id])
  character_id Int

  strength     Int
  dexterity    Int
  constitution Int
  intelligence Int
  wisdom       Int
  charisma     Int

  @@unique([character_id])
  @@map("attributes")
}

model Defense {
  character    Character @relation(fields: [character_id], references: [id])
  character_id Int

  slot1_name    String
  slot1_defense Int
  slot1_penalty Int
  slot2_name    String
  slot2_defense Int
  slot2_penalty Int
  attribute     Attributes
  use_atribute  Boolean
  others        Int

  @@unique([character_id])
  @@map("defenses")
}

enum Attributes {
  FOR
  DES
  CON
  INT
  SAB
  CAR
}

model Attack {
  character    Character @relation(fields: [character_id], references: [id])
  character_id Int

  id                  Int         @id @default(autoincrement())
  name                String
  attack_bonus        Int
  damage              String
  extra_damage        Int
  damage_type         DamageTypes
  damage_attribute    Attributes
  extra_dices         Int
  critical_type       String
  critical_value      Int
  critical_multiplier Int
  range               Ranges

  @@map("attacks")
}

enum Ranges {
  Curto
  Medio
  Longo
  Outro
}

enum DamageTypes {
  Perfuracao
  Corte
  Impacto
  Outro
}

model CharacterSkill {
  character    Character @relation(fields: [character_id], references: [id])
  character_id Int

  skill     Skill      @relation(fields: [skill_id], references: [id])
  skill_id  Int
  trained   Boolean
  attribute Attributes
  others    Int

  @@unique([skill_id])
  @@map("character_skills")
}

// Static

model Skill {
  id               Int              @id @default(autoincrement())
  name             String
  trained          Boolean
  penalty          Boolean
  character_skills CharacterSkill[]

  @@map("skills")
}
